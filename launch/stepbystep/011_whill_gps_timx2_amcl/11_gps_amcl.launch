<?xml version="1.0"?>
<launch>
	







	<!--<param name="/use_sim_time" value="true"/>
	-->
	<!--  ***** GPS ublox *****  -->
	<node pkg="ublox_gps" type="ublox_gps" name="ublox" output="screen" clear_params="true" respawn="true" respawn_delay="30">
		<rosparam command="load" file="$(find ublox_gps)/config/zed_f9p_rover.yaml" />
	</node>
	<node pkg="tf" type="static_transform_publisher" name="stp_gps_frame" args="0 0 1.03 0 0 0 base_link gps 100" />


	<!--include file="$(find gps_amcl)/launch/ukf.launch"/ -->

	<!--  ****** GPS AMCL *****  -->
	<node pkg="gps_amcl" type="gps_amcl" name="gps_amcl" output="screen">
		<rosparam file="$(find gps_amcl)/cfg/gps_amcl_params.yaml" command="load" />
		<param name="odom_frame_id" value="odom"/>
		<param name="base_frame_id" value="laser_link"/>
		<param name="initial_pose_x"            value="0.0"/>
		<param name="initial_pose_y"            value="0.0"/>
		<param name="initial_pose_a"            value="-0.657"/>
		<param name="initial_cov_xx"            value="0.001"/>
		<param name="initial_cov_yy"            value="0.001"/>
		<param name="initial_cov_aa"            value="0.001"/>
		<param name="gps_topic"            value="/pixhawk_gps_t"/>
	</node>

	<!-- Static map for GPS AMCL  -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(find sick_wagen)/map/garden_with_gps.yaml" output="log">
		<param name="frame_id" value="map" />
	</node>

	<!-- Odometry source -->
	<node pkg="gps_amcl" type="odometry_transform.py" name="odometry_source" output="log">
	  <param name="send_tf" value="True"/>
	  <param name="heading_from_poses" value="False"/>
	  <param name="reset_odometry" value="False"/>
	  <!--param name="loam_active" value="True"/-->
	  <param name="loam_active" value="False"/>
	  <param name="input_type" value="0"/>
	  <!--param name="input_topic" value="/laser_odom_to_init"/-->
	  <param name="input_topic" value="/odometry_gt"/>
	  <param name="output_topic" value="/lidar_odometry"/>
	  <param name="tf_parent" value="odom"/>
	  <param name="tf_child" value="base_link"/>
	</node>

	<!-- AMCL GPS Corrections -->
	<node pkg="gps_amcl" type="odometry_transform.py" name="gps_corrections" output="screen">
	  <param name="send_tf" value="False"/>
	  <param name="heading_from_poses" value="False"/>
	  <param name="add_noise_cov" value="0.3"/>
	  <param name="reset_odometry" value="False"/>
	  <!--param name="first_x" value="621334.2248625141"/>
	  <param name="first_y" value="3209319.0555673223"/>
	  <param name="first_z" value="379.63"/-->
	  <param name="loam_active" value="False"/>
	  <param name="input_type" value="0"/>
	  <param name="input_topic" value="/odometry_gt"/>
	  <param name="output_topic" value="/pixhawk_gps_t"/>
	  <param name="tf_parent" value="map"/>
	  <param name="tf_child" value="map"/>
	</node>

	<!-- AMCL GPS Output -->
	<node pkg="gps_amcl" type="odometry_transform.py" name="amcl_output" output="log">
	  <param name="send_tf" value="False"/>
	  <param name="heading_from_poses" value="False"/>
	  <param name="reset_odometry" value="False"/>
	  <param name="loam_active" value="False"/>
	  <param name="input_type" value="1"/>
	  <param name="input_topic" value="/amcl_pose"/>
	  <param name="output_topic" value="/amcl_pose_t"/>
	  <param name="tf_parent" value="map"/>
	  <param name="tf_child" value="laser_link"/>
	</node>

	<!-- Groundtruth -->
	<node pkg="gps_amcl" type="odometry_transform.py" name="odometry_groundtruth" output="screen">
	  <param name="send_tf" value="False"/>
	  <param name="heading_from_poses" value="True"/>
	  <param name="reset_odometry" value="True"/>
	  <param name="first_x" value="452915.17"/> <!-- 42->462655.29   34->461206.41   36->452915.17 -->
	  <param name="first_y" value="5430537.84"/>  <!-- 42->5428328.33   34->5426213.64    36->5430537.84 -->
	  <param name="first_z" value="121.16960907"/>
	  <param name="loam_active" value="False"/>
	  <param name="translation_to_frame" value="False"/>
	  <param name="input_type" value="0"/>
	  <param name="input_topic" value="gps_odometry"/>
	  <param name="output_topic" value="odometry_gt"/>
	  <param name="tf_parent" value="map"/>
	  <param name="tf_child" value="base_link"/>
	</node>


	<node pkg="gps_common" type="utm_odometry_node" name="utm_odometry_node">
	  <param name="rot_covariance" value="0.001"/>
          <param name="frame_id" value="map" />
	  <param name="child_frame_id" value="base_link" />
	  <remap from="fix" to="/ublox/fix"/>
	  <remap from="odom" to="gps_odometry"/>
	</node>

  	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find gps_amcl)/cfg/gps_amcl.rviz" />

	<!-- *****   LiDAR   ***** -->
	<group ns="tim_scans">
		<node name="sick_tim_R" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
			<param name="scanner_type" type="string" value="sick_tim_5xx"/>
			<!-- -135째 -->
			<param name="min_ang" type="double" value="-1.832595715"/>
			<!-- 135째 -->
			<param name="max_ang" type="double" value="1.832595715"/>
			<param name="use_binary_protocol" type="bool" value="true"/>
			<param name="range_max" type="double" value="100.0"/>
			<param name="intensity" type="bool" value="True"/>
			<param name="hostname" type="string" value="192.168.0.2"/>
			<param name="cloud_topic" type="string" value="tim_cloud_R"/>
			<param name="frame_id" type="str" value="tim_link_R"/>
			<param name="port" type="string" value="2112"/>
			<param name="timelimit" type="int" value="5"/>
			<param name="sw_pll_only_publish" type="bool" value="true"/>
			<param name="min_intensity" type="double" value="0.0"/>
			<remap from="scan" to="tim_scan_R"/>
		</node>
		<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
		<node pkg="tf" type="static_transform_publisher" name="stp_tim_R_frame" args="0.83 -0.31 0 -0.785398 0 0 base_link tim_link_R 100" />
		<node name="sick_tim_L" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
			<param name="scanner_type" type="string" value="sick_tim_5xx"/>
			<!-- -135째 -->
			<param name="min_ang" type="double" value="-1.832595715"/>
			<!-- 135째 -->
			<param name="max_ang" type="double" value="1.832595715"/>
			<param name="use_binary_protocol" type="bool" value="true"/>
			<param name="range_max" type="double" value="100.0"/>
			<param name="intensity" type="bool" value="True"/>
			<param name="hostname" type="string" value="192.168.0.3"/>
			<param name="cloud_topic" type="string" value="tim_cloud_L"/>
			<param name="frame_id" type="str" value="tim_link_L"/>
			<param name="port" type="string" value="2112"/>
			<param name="timelimit" type="int" value="5"/>
			<param name="sw_pll_only_publish" type="bool" value="true"/>
			<param name="min_intensity" type="double" value="0.0"/>
			<remap from="scan" to="tim_scan_L"/>
		</node>
		<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
		<node pkg="tf" type="static_transform_publisher" name="stp_tim_L_frame" args="0.83 0.31 0 0.785398 0 0 base_link tim_link_L 100" />
	</group>

	<!--  *****  Laserscan Multi Merger  *****  -->
	<arg name="node_start_delay" default="5.0" />
	<node pkg="ira_laser_tools" name="whill_laserscan_multi_merger" type="whill_laserscan_multi_merger" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'">
		<param name="destination_frame" value="laser_link"/>
		<param name="cloud_destination_topic" value="/merged_cloud"/>
		<param name="scan_destination_topic" value="/scan"/>
		<param name="laserscan_topics" value ="/tim_scans/tim_scan_R /tim_scans/tim_scan_L" />
		<!-- LIST OF THE LASER SCAN TOPICS TO SUBSCRIBE -->
		<param name="angle_min" value="-3.14159265"/>
		<param name="angle_max" value="3.14159265"/>
		<param name="angle_increment" value="0.004363323"/>
		<param name="scan_time" value="0.02"/>
		<param name="range_min" value="0.2"/>
		<param name="range_max" value="60.0"/>
	</node>
	<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
	<node pkg="tf" type="static_transform_publisher" name="stp_laser_frame" args="0.83 0 0 0 0 0 base_link laser_link 100" />

	
	<!--  *****  WHILL  *****  -->
	<arg name="model" default="$(find ros_whill)/xacro/modelc.xacro" />
	<arg name="gui" default="true" />
	<param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
		<remap from="/joint_states" to="/whill/states/jointState" />
	</node>
	<arg name="serialport" default="$(env TTY_WHILL)"/>
	<node pkg="ros_whill" type="ros_whill" name="whill" output="screen">
		<rosparam file="$(find ros_whill)/params/initial_speedprofile.yaml" command="load" />
		<param name="keep_connected" value="true" />
		<!-- Serial Device name -->
		<param name="serialport" value="$(arg serialport)"/>
		<!-- Output Odometry tf or not. If other node publishes odom->base_link tf, Change value to "false" -->
		<param name="publish_tf" value="true"/>
	</node>
</launch>
